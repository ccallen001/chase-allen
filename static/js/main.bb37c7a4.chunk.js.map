{"version":3,"sources":["components/Header/Header.tsx","components/Nav/Nav.tsx","store/store.ts","views/Home/Home.tsx","assets/images/chase.jpeg","views/About/About.tsx","views/View.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Header","className","Nav","to","activeClassName","exact","initialState","count","user","name","store","configureStore","reducer","state","action","type","payload","Home","console","log","getState","dispatch","About","src","chase","alt","View","path","App","data-testid","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bb37c7a4.chunk.js","sourcesContent":["import './Header.scss';\n\nfunction Header() {\n  return (\n    <header className=\"Header\">\n        <h1 className=\"Header-text\">Chase Allen</h1>\n      </header>\n  );\n}\n\nexport default Header;","import { NavLink } from 'react-router-dom';\n\nimport './Nav.scss';\n\nfunction Nav() {\n  return (\n    <nav>\n      <NavLink to=\"/\" activeClassName=\"active-route\" exact>\n        Home\n      </NavLink>\n      <NavLink to=\"/about\" activeClassName=\"active-route\" exact>\n        About\n      </NavLink>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import { configureStore } from '@reduxjs/toolkit';\n\ninterface State {\n  count: number;\n  user: {\n    name: string;\n  };\n}\n\ntype Action = {\n  type: string;\n  payload?: any;\n};\n\nconst initialState: State = {\n  count: 0,\n  user: {\n    name: 'Chase'\n  }\n};\n\nfunction count(state = initialState, action: Action) {\n  if (action.type === 'incrementCount') {\n    return {\n      ...state,\n      count: state.count + 1\n    };\n  }\n\n  if (action.type === 'decrementCount') {\n    return {\n      ...state,\n      count: state.count - 1\n    };\n  }\n\n  return state;\n}\n\nfunction user(state = initialState, action: Action) {\n  if (action.type === 'setUser') {\n    return {\n      ...state,\n      user: {\n        name: action.payload || state.user.name\n      }\n    };\n  }\n\n  return state;\n}\n\nconst store = configureStore({\n  reducer: {\n    count,\n    user\n  }\n});\n\nexport default store;\n","import store from '../../store/store';\n\nimport './Home.scss';\n\nfunction Home() {\n  console.log(store.getState());\n  store.dispatch({ type: 'incrementCount' });\n  store.dispatch({ type: 'setUser', payload: 'Fake Chase' });\n  console.log(store.getState());\n\n  return (\n    <div className=\"view Home\">\n      <h3 className=\"view-title\">Home</h3>\n      <p className=\"msg\">\n        <span className=\"hand\">ðŸ‘‹</span> Hey, I'm Chase!\n      </p>\n    </div>\n  );\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/chase.724f11d1.jpeg\";","import chase from '../../assets/images/chase.jpeg';\n\nimport './About.scss';\n\nfunction About() {\n  return (\n    <div className=\"view About\">\n      <h3 className=\"view-title\">About</h3>\n      <img src={chase} alt=\"Chase Allen\" />\n    </div>\n  );\n}\n\nexport default About;\n","import { Switch, Route } from 'react-router-dom';\n\nimport Home from './Home/Home';\nimport About from './About/About';\n\nimport './View.scss';\n\nfunction View() {\n  return (\n    <div className=\"view\">\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default View;\n","import Header from '../components/Header/Header';\nimport Nav from '../components/Nav/Nav';\nimport View from '../views/View';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <Header />\n      <Nav />\n      <View />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { HashRouter } from 'react-router-dom';\n\nimport './index.scss';\n\nimport App from './app/App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}